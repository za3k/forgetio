// Generated by CoffeeScript 1.6.2
var assert, dbCallStub, magicValue, makeMagicValue, sinon, successFail, _;

assert = require("pretty-assert");

_ = require("underscore");

sinon = require("sinon");

successFail = require("../database/model").successFail;

dbCallStub = function() {
  var stub;

  stub = {};
  stub.success = function(successCb) {
    assert(!_(stub).has("successCb"));
    stub.successCb = successCb;
    return stub;
  };
  stub.failure = function(failureCb) {
    assert(!_(stub).has("failureCb"));
    stub.failureCb = failureCb;
    return stub;
  };
  stub.verifySetup = function() {
    assert(_(stub).has("failureCb"));
    return assert(_(stub).has("successCb"));
  };
  stub.succeed = function(result) {
    stub.verifySetup();
    return stub.successCb(result);
  };
  stub.fail = function(errValue) {
    stub.verifySetup();
    return stub.failureCb(errValue);
  };
  return stub;
};

magicValue = 0;

makeMagicValue = function() {
  magicValue += 1;
  return magicValue;
};

describe('model', function() {
  describe('(dbCallStub)', function() {
    it('should call a success function with exactly one argument on success', function() {
      var dbcs, failureStub, successStub;

      dbcs = dbCallStub();
      successStub = sinon.spy();
      failureStub = sinon.spy();
      dbcs.success(successStub).failure(failureStub);
      dbcs.verifySetup();
      magicValue = makeMagicValue();
      dbcs.succeed(magicValue);
      assert(successStub.calledOnce);
      assert(!failureStub.called);
      return assert(successStub.alwaysCalledWithExactly(magicValue));
    });
    return it('should call a failure function with exactly one argument on failure', function() {
      var dbcs, failureStub, successStub;

      dbcs = dbCallStub();
      successStub = sinon.spy();
      failureStub = sinon.spy();
      dbcs.success(successStub).failure(failureStub);
      dbcs.verifySetup();
      magicValue = makeMagicValue();
      dbcs.fail(magicValue);
      assert(!successStub.called);
      assert(failureStub.calledOnce);
      return assert(failureStub.alwaysCalledWithExactly(magicValue));
    });
  });
  return describe('.successFail', function() {
    it('should call a function with exactly one argument on success', function() {
      var cb, dbcs;

      dbcs = dbCallStub();
      cb = sinon.spy();
      successFail(dbcs, cb);
      dbcs.verifySetup();
      magicValue = makeMagicValue();
      dbcs.succeed(magicValue);
      assert(cb.calledOnce);
      return assert(cb.alwaysCalledWithExactly(magicValue));
    });
    return it('should call a function with exactly two arguments on failure, the first undefined', function() {
      var cb, dbcs;

      dbcs = dbCallStub();
      cb = sinon.spy();
      successFail(dbcs, cb);
      dbcs.verifySetup();
      magicValue = makeMagicValue();
      dbcs.fail(magicValue);
      assert(cb.calledOnce);
      return assert(cb.alwaysCalledWithExactly(void 0, magicValue));
    });
  });
});
