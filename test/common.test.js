// Generated by CoffeeScript 1.6.2
var assert, dbCallStub, sinon, _;

assert = require("pretty-assert");

_ = require("underscore");

sinon = require("sinon");

dbCallStub = function() {
  var stub;

  stub = {};
  stub.success = function(successCb) {
    assert(!_(stub).has("successCb"));
    stub.successCb = successCb;
    return stub;
  };
  stub.failure = function(failureCb) {
    assert(!_(stub).has("failureCb"));
    stub.failureCb = failureCb;
    return stub;
  };
  stub.verifySetup = function() {
    assert(_(stub).has("failureCb"));
    return assert(_(stub).has("successCb"));
  };
  stub.succeed = function(result) {
    stub.verifySetup();
    return stub.successCb(result);
  };
  stub.fail = function(result, errValue) {
    stub.verifySetup();
    return stub.failureCb(result, errValue);
  };
  return stub;
};

describe('Common', function() {
  describe('timesOfDay()', function() {
    it('should be 25 options', function() {
      return require("../common").sync(function(common) {
        return assert.equal(25, common.timesOfDay.length);
      });
    });
    return it('should contain only valid values', function() {
      return require("../common").sync(function(common) {
        var o, _i, _len, _ref, _results;

        _ref = common.timesOfDay;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          o = _ref[_i];
          assert.finite(o.value);
          _results.push(assert.string(o.text));
        }
        return _results;
      });
    });
  });
  describe('ectConfig.timezones', function() {
    return it('should contain only valid values', function() {
      return require("../common").sync(function(common) {
        var o, _i, _len, _ref, _results;

        _ref = common.ectConfig.timezones;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          o = _ref[_i];
          _results.push(assert.defined(o.id));
        }
        return _results;
      });
    });
  });
  describe('dbCallStub', function() {
    it('should call a success function with exactly one argument on success', function() {
      var dbcs, failureStub, magicValue, successStub;

      dbcs = dbCallStub();
      successStub = sinon.spy();
      failureStub = sinon.spy();
      dbcs.success(successStub).failure(failureStub);
      dbcs.verifySetup();
      magicValue = 100;
      dbcs.succeed(magicValue);
      assert(successStub.calledOnce);
      assert(!failureStub.called);
      return assert(successStub.alwaysCalledWithExactly(magicValue));
    });
    return it('should call a failure function with exactly two arguments on failure, the first null', function() {
      var dbcs, failureStub, magicValue, successStub;

      dbcs = dbCallStub();
      successStub = sinon.spy();
      failureStub = sinon.spy();
      dbcs.success(successStub).failure(failureStub);
      dbcs.verifySetup();
      magicValue = 101;
      dbcs.fail(void 0, magicValue);
      assert(!successStub.called);
      assert(failureStub.calledOnce);
      return assert(failureStub.alwaysCalledWithExactly(void 0, magicValue));
    });
  });
  return describe('successFail', function() {
    var successFail;

    successFail = require("../common").successFail;
    it('should call a function with exactly one argument on success', function() {
      debugger;
      var cb, dbcs, magicValue;

      dbcs = dbCallStub();
      cb = sinon.spy();
      successFail(dbcs, cb);
      dbcs.verifySetup();
      magicValue = 102;
      dbcs.succeed(magicValue);
      assert(cb.calledOnce);
      return assert(cb.alwaysCalledWithExactly(magicValue));
    });
    return it('should call a function with exactly two arguments on failure, the first null', function() {
      var cb, dbcs, magicValue;

      dbcs = dbCallStub();
      cb = sinon.spy();
      successFail(dbcs, cb);
      dbcs.verifySetup();
      magicValue = 103;
      dbcs.fail("SHOULD NOT BE SEEN", magicValue);
      console.log(cb.callCount);
      assert(cb.calledOnce);
      return assert(cb.alwaysCalledWithExactly(void 0, magicValue));
    });
  });
});
