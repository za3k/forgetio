// Generated by CoffeeScript 1.6.2
var delay, offsetDisplayName, offsetToHoursAndMinutes, tzs;

tzs = void 0;

delay = function(ms, func) {
  return setTimeout(func, ms);
};

module.exports.timezones = function(cb) {
  var common, model;

  if (tzs) {
    return tzs;
  } else {
    model = require('./database/model');
    common = require('./common');
    return delay(100, function() {
      debugger;      return model.findAllTimezones(function(db_times, err) {
        debugger;
        var db_time, timezones;

        if (err) {
          common.logger.error("Couldn't load timezones");
        }
        timezones = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = db_times.length; _i < _len; _i++) {
            db_time = db_times[_i];
            _results.push({
              id: db_time.id,
              text: offsetDisplayName(db_time.offset, db_time.text)
            });
          }
          return _results;
        })();
        tzs = timezones;
        if (cb) {
          return cb(tzs, err);
        }
      });
    });
  }
};

offsetDisplayName = function(offset, text) {
  var hours, minutes, _ref;

  if (offset === 0) {
    return text;
  } else {
    _ref = offsetToHoursAndMinutes(offset), hours = _ref.hours, minutes = _ref.minutes;
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    return "(UTC " + hours + ":" + minutes + ") " + text;
  }
};

offsetToHoursAndMinutes = function(offset) {
  var hours;

  if (offset === 0) {
    return {
      hours: 0,
      minutes: 0
    };
  } else if ((offset % 3600) === 0) {
    return {
      hours: offset / 3600,
      minutes: 0
    };
  } else {
    if (offset > 0) {
      hours = Math.floor(offset / 3600);
    }
    if (offset < 0) {
      hours = Math.ceil(offset / 3600);
    }
    return {
      hours: hours,
      minutes: Math.floor(Math.abs((offset % 3600) / 60))
    };
  }
};
