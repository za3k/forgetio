// Generated by CoffeeScript 1.6.2
var common, funcflow, logger, model;

model = require('./model');

common = require('../common');

logger = common.logger;

funcflow = require('funcflow');

/* example of reminder for this query
{
    UserId:0
    version:0
    message:'some message'
    enabled:true
    id:undefined   # it's a new record
    phone:'+15553121238'
    times:[{
        start:0 # seconds since 12am... in this case 12am
        end:60*60*8 # seconds since 12am... in this case 8 am
        frequency: 5
        days: 31 # there are utility methods getDays and setDays on model.ReminderTime which make setting this value easier
    },{
        start:60*60*1 # seconds since 12am... in this case 1 am
        end:60*60*8 # seconds since 12am... in this case 8 am
        frequency: 5
        days: 31 # there are utility methods getDays and setDays on model.ReminderTime which make setting this value easier
    }]
}
*/


exports.createSaveReminderTran = function(reminder) {
  var createTimeStep, removeTimeStep, savedReminder, t;

  if (reminder.id != null) {
    reminder.version++;
    if (reminder.parent_id == null) {
      reminder.parent_id = reminder.id;
    }
    delete reminder.id;
  }
  savedReminder = null;
  createTimeStep = function(time) {
    return {
      errMsg: "Could not create ReminderTime",
      run: function(step) {
        this.time = model.ReminderTime.build(time);
        this.time.reminder_id = savedReminder.id;
        return this.time.save();
      },
      rollback: function(step) {
        return this.time.destroy();
      }
    };
  };
  removeTimeStep = function(time) {
    return {
      errMsg: "Could not delete ReminderTime",
      run: function(step) {
        return model.ReminderTime.find({
          where: {
            id: time.id
          }
        }).success(function(time) {
          this.time = time;
          this.time.deleted = true;
          return this.time.save();
        });
      },
      rollback: function(step) {
        this.time.deleted = false;
        return this.time.save();
      }
    };
  };
  return common.flatten([
    {
      errMsg: "Call to see if user owns reminder failed!",
      run: function(step, err) {
        if (reminder.parent_id == null) {
          step.next();
          return;
        }
        return model.Reminder.find({
          where: {
            id: reminder.parent_id
          }
        });
      }
    }, {
      run: function(step, err, rem) {
        if ((reminder.parent_id != null) && ((rem == null) || rem.UserId !== reminder.UserId)) {
          console.log(reminder.parent_id);
          throw "User does not own the reminder they are trying to save!";
        }
        if ((rem != null ? rem.parent_id : void 0) != null) {
          reminder.parent_id = rem.parent_id;
        }
        return step.next();
      }
    }, exports.createSavePhoneTran({
      number: reminder.phone
    }), {
      errMsg: "Could not save Reminder",
      run: function(step, err, phone) {
        savedReminder = model.Reminder.build(reminder.values != null ? reminder.values : reminder);
        savedReminder.phone_id = phone.id;
        delete savedReminder.phone;
        delete savedReminder.times;
        return savedReminder.save();
      },
      rollback: function(step) {
        return savedReminder.destroy();
      }
    }, (function() {
      var _i, _len, _ref, _results;

      _ref = reminder.times;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        _results.push(createTimeStep(t));
      }
      return _results;
    })(), {
      run: function(step, err) {
        return step.next(savedReminder);
      }
    }
  ]);
};

/* example of phone number for this query
{
    id:undefined # new number
    number:"+15554561738"
    UserId:3
    confirmedDate:null # not confirmed
}
*/


exports.createSavePhoneTran = function(phone) {
  if (phone.values != null) {
    phone = phone.values;
  }
  return [
    {
      errMsg: "Call to see if phone number already exists failed!",
      run: function(step) {
        return model.Phone.find({
          where: {
            number: phone.number
          }
        });
      }
    }, {
      run: function(step, err, p) {
        if (p) {
          phone = common.extend(p.values, phone);
        }
        return step.next();
      }
    }, {
      errMsg: "Could not save phone number",
      run: function(step) {
        phone = model.Phone.build(phone);
        phone.isNewRecord = phone.id == null;
        return phone.save();
      }
    }, {
      run: function(step, error, p) {
        return step.next(p);
      }
    }
  ];
};

exports.runTran = function(steps, callback) {
  var createRollbackStep, createRunStep, currStep, i, rollback;

  if (callback == null) {
    callback = function() {};
  }
  steps.push(function(step, err) {
    return step.next();
  });
  currStep = 0;
  createRollbackStep = function(stepFunc) {
    return function(step, err) {
      var res;

      if (err) {
        logger.error("Error rolling back. Message:'" + steps[currStep].errMsg + "'", err);
      }
      if (stepFunc.rollback != null) {
        res = stepFunc.rollback.apply(stepFunc, arguments);
        if ((res != null) && (res.on != null)) {
          res.on("success", step.next);
          return res.on("error", function(err) {
            throw err;
          });
        }
      } else {
        return step.next();
      }
    };
  };
  rollback = function(err) {
    var i;

    logger.error("Error in transaction... rolling back. Message:'" + steps[currStep].errMsg + "'", err);
    return funcflow((function() {
      var _i, _ref, _results;

      _results = [];
      for (i = _i = _ref = currStep - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        _results.push(createRollbackStep(steps[i]));
      }
      return _results;
    })(), function(step, e) {
      return callback(step, err);
    });
  };
  createRunStep = function(index, stepFunc) {
    return function(step, err) {
      var res;

      if (err) {
        rollback(err);
        return;
      }
      currStep = index;
      if (stepFunc.run != null) {
        res = stepFunc.run.apply(stepFunc, arguments);
        if ((res != null) && (res.on != null)) {
          res.on("success", step.next);
          return res.on("error", function(err) {
            throw err;
          });
        }
      } else {
        return step.next();
      }
    };
  };
  return funcflow((function() {
    var _i, _ref, _results;

    _results = [];
    for (i = _i = 0, _ref = steps.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(createRunStep(i, steps[i]));
    }
    return _results;
  })(), {}, callback);
};
