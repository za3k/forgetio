// Generated by CoffeeScript 1.6.2
var Phone, ReceivedMessage, Reminder, ReminderTime, SentMessage, Sequelize, TimeZone, User, UserPayment, common, communication, communication_admin, defaultID, define, extern, logger, nconf, pg, sequelize, successFail;

pg = require('pg');

common = require('../common');

nconf = common.nconf;

logger = common.logger;

extern = function(name, value) {
  return module.exports[name] = value;
};

communication = "SELECT reminders.id AS reminder_id, reminders.version, reminder_times.id AS reminder_time_id, users.id AS user_id, reminders.message, sent_messages.scheduled, sent_messages.cancelled, received_messages.server_received, received_messages.body as received_body, sent_messages.body as sent_body, sent_messages.to AS sent_to, received_messages.from_ as received_from FROM users,reminders,reminder_times,sent_messages LEFT JOIN received_messages ON (sent_messages.id = received_messages.in_response_to) WHERE (users.id = reminders.user_id AND reminders.id = reminder_times.reminder_id AND sent_messages.sent_for_reminder_time_id = reminder_times.id AND sent_messages.cancelled = false) ORDER BY scheduled DESC";

communication_admin = "SELECT reminders.user_id AS user_id, reminders.id AS reminder_id, reminders.version, reminder_times.id AS reminder_time_id, users.id AS user_id, reminders.message, sent_messages.scheduled, sent_messages.cancelled, received_messages.server_received, received_messages.body as received_body, sent_messages.body as sent_body, sent_messages.to AS sent_to, received_messages.from_ as received_from FROM users,reminders,reminder_times,sent_messages LEFT JOIN received_messages ON (sent_messages.id = received_messages.in_response_to) WHERE (reminders.id = reminder_times.reminder_id AND sent_messages.sent_for_reminder_time_id = reminder_times.id AND sent_messages.cancelled = false) ORDER BY scheduled DESC";

extern("getCommunication", function(user, cb) {
  var query;

  query = communication;
  if (user.id === 1) {
    query = communication_admin;
  }
  return pg.connect("tcp://localhost/notify", function(err, client) {
    if (err != null) {
      cb(err, null);
    }
    return client.query(query, function(err, result) {
      if (err != null) {
        return cb(err, null);
      } else {
        return cb(err, result.rows.filter(function(x) {
          return x.user_id === user.id;
        }));
      }
    });
  });
});

successFail = extern("successFail", function(dbcall, cb) {
  return dbcall.success(function(x) {
    return cb(x);
  }).failure(function(err) {
    return cb(void 0, err);
  });
});

extern("getUserForId", function(id, cb) {
  return successFail(User.find({
    where: {
      id: id
    }
  }), cb);
});

extern("getUserForEmail", function(email, cb) {
  return successFail(User.find({
    where: {
      email: email
    }
  }), cb);
});

extern("saveUser", function(user, cb) {
  return successFail(user.save(), cb);
});

extern("createUserPayment", function(payment, cb) {
  return successFail(UserPayment.create(payment), cb);
});

extern("updateUser", function(user, changelist, cb) {
  return successFail(user.updateAttributes(changelist), cb);
});

extern("updateUserPayment", function(userPayment, changelist, cb) {
  return successFail(userPayment.updateAttributes(changelist), cb);
});

extern("findAllTimezones", function(cb) {
  return successFail(TimeZone.findAll({
    order: 'id ASC'
  }), cb);
});

Sequelize = require("sequelize");

sequelize = new Sequelize('notify', 'postgres', 'brinksucksballs', {
  host: nconf.get("dbHost"),
  port: nconf.get("dbPort"),
  dialect: 'postgres',
  logging: logger.debug,
  omitNull: true,
  define: {}
});

extern("Sequelize", Sequelize);

extern("sequelize", sequelize);

defaultID = {
  type: Sequelize.INTEGER,
  autoIncrement: true,
  primaryKey: true
};

define = function(name, dbname, options) {
  var tmp;

  tmp = sequelize.define(dbname, options);
  extern(name, tmp);
  return tmp;
};

module.exports.chainer = sequelize.queryChainer;

Phone = define('Phone', 'phones', {
  id: defaultID,
  number: {
    type: Sequelize.STRING,
    allowNull: false
  },
  confirmedDate: {
    type: Sequelize.DATE,
    defaultValue: null
  }
});

User = define('User', 'users', {
  id: defaultID,
  credit: {
    type: Sequelize.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  name: {
    type: Sequelize.STRING
  },
  email: {
    type: Sequelize.STRING,
    allowNull: false
  },
  password: {
    type: Sequelize.STRING,
    allowNull: false
  }
});

UserPayment = define('UserPayment', 'user_payments', {
  id: defaultID,
  credit: {
    type: Sequelize.INTEGER
  },
  money: {
    type: Sequelize.INTEGER
  },
  stripe_fee: {
    type: Sequelize.INTEGER
  },
  stripe_token: {
    type: Sequelize.STRING
  },
  stripe_charge: {
    type: Sequelize.STRING
  }
});

Reminder = define('Reminder', 'reminders', {
  id: defaultID,
  version: {
    type: Sequelize.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  message: {
    type: Sequelize.STRING,
    allowNull: false,
    defaultValue: ""
  }
});

ReminderTime = define('ReminderTime', 'reminder_times', {
  start: {
    type: Sequelize.INTEGER,
    allowNull: false
  },
  end: {
    type: Sequelize.INTEGER,
    allowNull: false
  },
  frequency: {
    type: Sequelize.FLOAT,
    allowNull: false,
    defaultValue: 0
  },
  days: {
    type: Sequelize.INTEGER,
    allowNull: false,
    defaultValue: 0
  }
}, {
  instanceMethods: {
    getDays: function() {
      return [(this.days & 1) === 1, (this.days & 2) === 2, (this.days & 4) === 4, (this.days & 8) === 8, (this.days & 16) === 16, (this.days & 32) === 32, (this.days & 64) === 64];
    },
    setDays: function(d) {
      return this.days = (d[0] && 1 || 0) | (d[1] && 2 || 0) | (d[2] && 4 || 0) | (d[3] && 8 || 0) | (d[4] && 16 || 0) | (d[5] && 32 || 0) | (d[6] && 64 || 0);
    }
  }
});

SentMessage = define('SentMessage', 'sent_messages', {
  id: defaultID,
  account: {
    type: sequelize.STRING,
    allowNull: false
  },
  twilio_id: {
    type: sequelize.STRING,
    allowNull: false
  },
  from_: {
    type: sequelize.STRING,
    allowNull: false
  },
  to: {
    type: sequelize.STRING,
    allowNull: false
  },
  body: {
    type: sequelize.STRING,
    allowNull: false
  },
  scheduled: {
    type: sequelize.DATE,
    allowNull: false
  },
  api_version: {
    type: sequelize.STRING,
    allowNull: false
  },
  server_sent: {
    type: sequelize.DATE,
    allowNull: true
  },
  server_confirmed: {
    type: sequelize.DATE,
    allowNull: true
  },
  twilio_status: {
    type: sequelize.STRING,
    allowNull: false
  },
  twilio_uri: {
    type: sequelize.STRING,
    allowNull: false
  },
  was_processed_after_confirm: {
    type: sequelize.BOOLEAN,
    allowNull: false,
    "default": false
  },
  cancelled: {
    type: sequelize.BOOLEAN,
    allowNull: false,
    "default": false
  }
});

ReceivedMessage = define('ReceivedMessage', 'received_messages', {
  id: defaultID,
  account: {
    type: sequelize.STRING,
    allowNull: false
  },
  twilio_id: {
    type: sequelize.STRING,
    allowNull: false
  },
  from_: {
    type: sequelize.STRING,
    allowNull: false
  },
  to: {
    type: sequelize.STRING,
    allowNull: false
  },
  body: {
    type: sequelize.STRING,
    allowNull: false
  },
  server_received: {
    type: sequelize.DATE,
    allowNull: true
  },
  api_version: {
    type: sequelize.STRING,
    allowNull: false
  },
  twilio_status: {
    type: sequelize.STRING,
    allowNull: true
  },
  was_processed_after_received: {
    type: sequelize.BOOLEAN,
    allowNull: false,
    "default": false
  }
});

TimeZone = define('TimeZone', 'timezones', {
  id: defaultID,
  offset: {
    type: Sequelize.INTEGER,
    allowNull: false
  },
  text: {
    type: Sequelize.STRING,
    allowNull: false
  }
});

User.hasMany(Reminder, {
  as: 'Reminders',
  foreignKey: "user_id"
});

User.belongsTo(TimeZone, {
  as: 'TimeZone',
  foreignKey: "timezone_id"
});

Reminder.hasMany(ReminderTime, {
  as: 'Times',
  foreignKey: "reminder_id"
});

Reminder.belongsTo(Phone, {
  as: 'Phone',
  foreignKey: "phone_id"
});

Phone.belongsTo(User, {
  as: 'User',
  foreignKey: "user_id"
});

SentMessage.belongsTo(ReminderTime, {
  as: 'ReminderTime',
  foreignKey: "sent_for_reminder_time_id"
});

ReceivedMessage.belongsTo(SentMessage, {
  as: 'InResponseTo',
  foreignKey: "in_response_to"
});
