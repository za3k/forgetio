// Generated by CoffeeScript 1.6.2
var check, common, emptyReminder, emptyTime, funcflow, getRemindersForUser, putReminderForUser, sanitize, transaction,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

transaction = require('../database/trans');

common = require('../common');

funcflow = require('funcflow');

check = require('validator').check;

sanitize = require('validator').sanitize;

emptyTime = {
  enabled: false,
  days: []
};

emptyReminder = {
  times: [emptyTime, emptyTime]
};

getRemindersForUser = function(user, cb) {
  var errHandler, last, steps;

  steps = [
    function(step, err) {
      if (err) {
        step.errHandler(err);
        return;
      }
      return step.user.getReminders().success(step.next);
    }, function(step, err, reminders) {
      var r, reminder, reminder_steps, _i, _len;

      if (err) {
        step.errHandler(err);
        return;
      }
      step.reminders = [];
      for (_i = 0, _len = reminders.length; _i < _len; _i++) {
        r = reminders[_i];
        reminder = {
          message: r.message,
          id: r.id,
          version: r.version,
          parentId: r.parentId,
          times: [],
          error: r.error
        };
        reminder_steps = [
          function(step2, err) {
            var phone_cb, time_cb;

            if (err) {
              step.errHandler(err);
              return;
            }
            time_cb = step2.spawn();
            phone_cb = step2.spawn();
            step2.r.getTimes().success(function(ts) {
              var d, day, t, time, _j, _k, _len1, _len2, _ref;

              for (_j = 0, _len1 = ts.length; _j < _len1; _j++) {
                t = ts[_j];
                time = {
                  frequency: t.frequency,
                  start: t.start / 60 / 60,
                  end: t.end / 60 / 60,
                  enabled: true,
                  days: []
                };
                d = t.days;
                _ref = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
                for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
                  day = _ref[_k];
                  if ((d % 2) === 1) {
                    time.days.push(day);
                    d -= 1;
                  }
                  d /= 2;
                }
                step2.reminder.times.push(time);
              }
              return time_cb();
            });
            step2.r.getPhone().success(function(p) {
              step2.reminder.phone = p.number;
              return phone_cb();
            });
            return step2.next();
          }, function(step2) {
            return step2.next();
          }
        ];
        cb = step.spawn();
        funcflow(reminder_steps, {
          reminder: reminder,
          r: r,
          errHandler: step.errHandler,
          catchExceptions: false
        }, function(step2, err, reminder) {
          if (err) {
            step.errHandler(err);
            return;
          }
          step.reminders.push(step2.reminder);
          return cb();
        });
      }
      return step.next();
    }
  ];
  last = function(step) {
    var r, _i, _len, _ref;

    _ref = step.reminders;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      r = _ref[_i];
      if (r.parent_id == null) {
        r.parentId = r.id;
      }
    }
    step.reminders = step.reminders.filter(function(reminder) {
      var _j, _len1, _ref1;

      _ref1 = step.reminders;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        r = _ref1[_j];
        if (r.parent_id === reminder.parent_id && r.version > reminder.version) {
          return false;
        }
      }
      return true;
    });
    return step.cb(step.reminders);
  };
  errHandler = function(err) {
    console.log("There was an error");
    return console.log(err);
  };
  return funcflow(steps, {
    errHandler: errHandler,
    cb: cb,
    user: user
  }, last);
};

putReminderForUser = function(reminder, user, success, failure) {
  var errHandler, last, steps;

  steps = [
    function(step, err) {
      if (err) {
        step.errHandler(err);
        return;
      }
      console.log("Putting reminder: " + step.reminder);
      return step.next();
    }, function(step, err) {
      if (err) {
        step.errHandler(err);
        return;
      }
      step.reminder.user_id = step.user.id;
      return step.next();
    }, function(step, err) {
      if (err) {
        step.errHandler(err);
        return;
      }
      check(reminder.message, "Message was blank").notEmpty();
      check(reminder.phone, "Phone number was blank").len(7, 64);
      return step.next();
    }, function(step) {
      reminder.times = reminder.times.filter(function(time) {
        if (!time.frequency) {
          return false;
        }
        return true;
      });
      return step.next();
    }, function(step, err) {
      var process_times, time, _i, _len, _ref;

      if (err) {
        step.errHandler(err);
        return;
      }
      process_times = function(time, cb) {
        var substeps;

        substeps = [
          function(substep, err) {
            if (err) {
              substep.errHandler(err);
              return;
            }
            substep.time.start = substep.time.start * 60 * 60;
            return substep.next();
          }, function(substep, err) {
            if (err) {
              substep.errHandler(err);
              return;
            }
            substep.time.end = substep.time.end * 60 * 60;
            return substep.next();
          }, function(substep, err) {
            var d, x;

            if (err) {
              substep.errHandler(err);
              return;
            }
            substep.time.days = (function() {
              var _i, _len, _ref, _results;

              _ref = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                x = _ref[_i];
                _results.push(__indexOf.call(substep.time.days, x) >= 0);
              }
              return _results;
            })();
            d = 0;
            while (substep.time.days.length > 0) {
              d *= 2;
              d += substep.time.days.pop();
            }
            substep.time.days = d;
            return substep.next();
          }, function(substep, err) {
            if (err) {
              step.errHandler(err);
              return;
            }
            check(substep.time.frequency, "Please enter a number for frequency").notEmpty().isDecimal();
            return substep.next();
          }, function(substep, err) {
            if (err) {
              step.errHandler(err);
              return;
            }
            return substep.next();
          }
        ];
        return funcflow(substeps, {
          time: time,
          errHandler: step.errHandler
        }, cb);
      };
      _ref = reminder.times;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        time = _ref[_i];
        if (time.frequency !== "") {
          process_times(time, step.spawn());
        }
      }
      return step.next();
    }, function(step, err) {
      if (err) {
        step.errHandler(err);
        return;
      }
      return step.next();
    }
  ];
  errHandler = function(err) {
    console.log("There was an error");
    if (err != null ? err.message : void 0) {
      err = err.message;
    }
    console.log(err);
    return failure(err);
  };
  last = function(step) {
    var trans;

    trans = transaction.createSaveReminderTran(step.reminder);
    return transaction.runTran(trans, success);
  };
  return funcflow(steps, {
    errHandler: errHandler,
    user: user,
    reminder: reminder
  }, last);
};

exports.scheduled = function(req, res, data) {
  var user;

  user = req.user.getUser();
  return getRemindersForUser(user, function(reminders) {
    var r, _i, _len;

    for (_i = 0, _len = reminders.length; _i < _len; _i++) {
      r = reminders[_i];
      r.times.push(emptyTime);
    }
    reminders.push(emptyReminder);
    return res.render('scheduled.ect', common.extend({
      req: req,
      page: 'Scheduled',
      daysOfWeek: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
      beginTimesOfDay: common.timesOfDay.slice(0, -1),
      endTimesOfDay: common.timesOfDay.slice(1),
      defaultPhone: "+1 (555) 555-5555",
      reminders: reminders
    }, data));
  });
};

exports.scheduledPost = function(req, res) {
  var json, reminder, _i, _len, _ref, _results;

  req.user.getUser();
  console.log(req.body);
  json = JSON.parse(req.body.json);
  _ref = json.reminders;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    reminder = _ref[_i];
    _results.push(putReminderForUser(reminder, user, function() {
      return exports.scheduled(req, res, {
        successMsg: "Successfully updated."
      });
    }, function(errMsg) {
      return exports.scheduled(req, res, {
        errorMsg: errMsg
      });
    }));
  }
  return _results;
};
