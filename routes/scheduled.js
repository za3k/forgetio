// Generated by CoffeeScript 1.6.2
var check, common, ctrl, emptyReminder, emptyTime, getRemindersForUser, processReminder, processTime, putReminderForUser, sanitize, transaction,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

transaction = require('../database/trans');

common = require('../common');

check = require('validator').check;

sanitize = require('validator').sanitize;

ctrl = require('ctrl');

emptyTime = {
  enabled: false,
  days: []
};

emptyReminder = {
  times: [emptyTime, emptyTime]
};

processReminder = function(r, errorHandler, cb) {
  var afterSuccessfulProcessing, reminder, reminder_steps;

  reminder = {
    message: r.message,
    id: r.id,
    version: r.version,
    parentId: r.parentId,
    times: [],
    error: r.error
  };
  reminder_steps = [
    function(step) {
      step.data.reminder = reminder;
      return step.next();
    }, function(step) {
      var phone_cb, time_cb;

      time_cb = step.spawn();
      phone_cb = step.spawn();
      r.getTimes().success(function(ts) {
        var d, day, t, time, _i, _j, _len, _len1, _ref;

        for (_i = 0, _len = ts.length; _i < _len; _i++) {
          t = ts[_i];
          time = {
            frequency: t.frequency,
            start: t.start / 60 / 60,
            end: t.end / 60 / 60,
            enabled: true,
            days: []
          };
          d = t.days;
          _ref = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            day = _ref[_j];
            if ((d % 2) === 1) {
              time.days.push(day);
              d -= 1;
            }
            d /= 2;
          }
          step.data.reminder.times.push(time);
        }
        return time_cb();
      }).failure(function(err) {
        step.data.timeErr = err;
        return time_cb();
      });
      r.getPhone().success(function(p) {
        step.data.reminder.phone = p.number;
        return phone_cb();
      }).failure(function(err) {
        step.data.phoneErr = err;
        return phone_cb();
      });
      return step.next();
    }, function(step) {
      if (step.data.timeErr != null) {
        throw step.data.timeErr;
      }
      if (step.data.phoneErr != null) {
        throw step.data.phoneErr;
      }
      return step.next();
    }
  ];
  afterSuccessfulProcessing = function(step) {
    return cb(step.data.reminder);
  };
  return ctrl(reminder_steps, {
    errorHandler: errorHandler
  }, afterSuccessfulProcessing);
};

getRemindersForUser = function(user, final_cb) {
  var errorHandler, last, steps;

  errorHandler = function(step, error) {
    console.log("There was an error");
    return console.log(error);
  };
  steps = [
    function(step) {
      return user.getReminders().success(function(reminders) {
        step.data.reminders = reminders;
        return step.next();
      }).failure(function(err) {
        step.data.getReminderErr = err;
        return step.next();
      });
    }, function(step) {
      if (step.data.getReminderErr != null) {
        throw step.data.getReminderErr;
      }
      return step.next();
    }, function(step) {
      var cb, r, reminders, _i, _len;

      reminders = step.data.reminders;
      step.data.reminders = [];
      for (_i = 0, _len = reminders.length; _i < _len; _i++) {
        r = reminders[_i];
        cb = step.spawn();
        processReminder(r, errorHandler, function(reminder) {
          step.data.reminders.push(reminder);
          return cb();
        });
      }
      return step.next();
    }, function(step) {
      var r, _i, _len, _ref;

      common.logger.debug(JSON.stringify(step.data));
      _ref = step.data.reminders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        if (r.parent_id == null) {
          r.parentId = r.id;
        }
      }
      step.data.reminders = step.data.reminders.filter(function(reminder) {
        var _j, _len1, _ref1;

        _ref1 = step.data.reminders;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          r = _ref1[_j];
          if (r.parent_id === reminder.parent_id && r.version > reminder.version) {
            return false;
          }
        }
        return true;
      });
      return step.next();
    }
  ];
  last = function(step) {
    return final_cb(step.data.reminders);
  };
  return ctrl(steps, {
    errorHandler: errorHandler
  }, last);
};

processTime = function(time) {
  var d, x;

  time.start = time.start * 60 * 60;
  time.end = time.end * 60 * 60;
  time.days = (function() {
    var _i, _len, _ref, _results;

    _ref = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      _results.push(__indexOf.call(time.days, x) >= 0);
    }
    return _results;
  })();
  d = 0;
  while (time.days.length > 0) {
    d *= 2;
    d += time.days.pop();
  }
  time.days = d;
  check(time.frequency, "Please enter a number for frequency").notEmpty().isDecimal();
  return time;
};

putReminderForUser = function(reminder, user, success, failure) {
  var errorHandler, last, steps;

  errorHandler = function(step, err) {
    common.logger.error("There was an error");
    if (err != null ? err.message : void 0) {
      err = err.message;
    }
    common.logger.error(err);
    return failure(err);
  };
  steps = [
    function(step) {
      common.logger.debug("Putting reminder: " + reminder);
      return step.next();
    }, function(step) {
      reminder.user_id = user.id;
      return step.next();
    }, function(step) {
      check(reminder.message, "Message was blank").notEmpty();
      check(reminder.phone, "Phone number was blank").len(7, 64);
      return step.next();
    }, function(step) {
      common.logger.debug("Stripping out invalid times");
      reminder.times = reminder.times.filter(function(time) {
        if (!time.frequency) {
          return false;
        }
        return true;
      });
      return step.next();
    }, function(step) {
      var time, _i, _len, _ref;

      _ref = reminder.times;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        time = _ref[_i];
        if (time.frequency !== "") {
          processTime(time);
        }
      }
      return step.next();
    }
  ];
  last = function(step) {
    var trans;

    trans = transaction.createSaveReminderTran(reminder);
    return transaction.runTran(trans, success);
  };
  return ctrl(steps, {
    errorHandler: errorHandler
  }, last);
};

exports.scheduled = function(req, res, data) {
  var user;

  user = req.user.getUser();
  return getRemindersForUser(user, function(reminders) {
    var r, _i, _len;

    for (_i = 0, _len = reminders.length; _i < _len; _i++) {
      r = reminders[_i];
      r.times.push(emptyTime);
    }
    reminders.push(emptyReminder);
    return res.render('scheduled.ect', common.extend({
      req: req,
      page: 'Scheduled',
      daysOfWeek: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
      beginTimesOfDay: common.timesOfDay.slice(0, -1),
      endTimesOfDay: common.timesOfDay.slice(1),
      defaultPhone: "+1 (555) 555-5555",
      reminders: reminders
    }, data));
  });
};

exports.scheduledPost = function(req, res) {
  var json, reminder, user, _i, _len, _ref, _results;

  user = req.user.getUser();
  console.log(req.body);
  json = JSON.parse(req.body.json);
  _ref = json.reminders;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    reminder = _ref[_i];
    _results.push(putReminderForUser(reminder, user, function() {
      return exports.scheduled(req, res, {
        successMsg: "Successfully updated."
      });
    }, function(errMsg) {
      return exports.scheduled(req, res, {
        errorMsg: errMsg
      });
    }));
  }
  return _results;
};
