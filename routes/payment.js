// Generated by CoffeeScript 1.6.2
var check, common, funcflow, model, routes, sanitize, stripe;

check = require('validator').check;

common = require('../common');

model = require('../database/model');

funcflow = require('funcflow');

sanitize = require('validator').sanitize;

stripe = require('stripe')('sk_live_fNeG2hpEa8Du0Dc5pYarIHT0');

routes = require('./all');

exports.account = function(req, res, data) {
  var user;

  user = req.user.getUser();
  return model.getCommunication(u, function(err, result) {
    var all, result_present;

    if (err) {
      common.logger.error(err);
    }
    all = common._.pluck(result, 'server_received');
    result_present = common._.compact(all);
    return res.render('account.ect', common.extend({
      page: 'Account',
      req: req,
      user: {
        messagesReceived: result_present.length,
        messagesSent: all.length - result_present.length,
        timezone: u.timezone_id,
        name: u.name,
        credits: u.credit,
        email: u.email,
        lowerTimeEstimate: u.credit / 10,
        upperTimeEstimate: u.credit / 5
      },
      warningLevel: function(daysLeft) {
        if (daysLeft < 1) {
          return "alert alert-error";
        } else if ((1 <= daysLeft && daysLeft < 7)) {
          return "alert";
        } else {
          return "alert alert-info";
        }
      }
    }, data));
  });
};

exports.paymentPost = function(req, res) {
  var errorHandler, json, steps, user;

  json = req.body;
  user = req.user.getUser();
  steps = [
    function(step, err) {
      var stripe_token;

      if (err) {
        step.errorHandler(err);
        return;
      }
      stripe_token = json.stripeToken;
      if ((stripe_token == null) || stripe_token === "") {
        common.logger.error("Stripe token missing on payment form");
        step.errorHandler("There was a server error with the form submission.");
        return;
      }
      check(json.credits).isInt().min(50).max(100000);
      step.credits = sanitize(json.credits).toInt();
      step.stripeToken = json.stripeToken;
      return step.next();
    }, function(step, err) {
      if (err) {
        step.errorHandler(err);
        return;
      }
      step.cost = step.credits * 2;
      return step.next();
    }, function(step, err) {
      if (err) {
        step.errorHandler(err);
        return;
      }
      return model.UserPayment.create({
        credit: step.credit,
        money: step.cost,
        stripe_token: step.stripeToken
      }).success(step.next).failure(function(err) {
        common.logger.error(err);
        step.errorHandler("There was a server error with the form submission.");
      });
    }, function(step, err, user_payment) {
      if (err) {
        step.errorHandler(err);
        return;
      }
      step.user_payment = user_payment;
      return step.next();
    }, function(step, err) {
      var charge;

      if (err) {
        step.errorHandler(err);
        return;
      }
      charge = {
        amount: step.cost,
        currency: "usd",
        card: step.stripeToken,
        description: "Buying " + step.credits + " credits for account: " + step.user.id + " (email: " + step.user.email + ")"
      };
      return stripe.charges.create(charge, step.next);
    }, function(step, err, err2, response) {
      if (err) {
        step.errorHandler(err);
        return;
      }
      if (err2) {
        step.errorHandler(err2);
        return;
      }
      if (!response.paid || !response.paid === true) {
        common.logger.error("Payment declined");
        step.errorHandler("Payment on this credit card was declined for the given amount.");
      }
      step.response = response;
      return step.next(response.id, response.fee);
    }, function(step, err, id, fee) {
      var onFailure, uc, updateCharge, updateUser, uu;

      if (err) {
        step.errorHandler(err);
        return;
      }
      onFailure = function(err) {
        common.logger.error(err);
        step.errorHandler("There was a problem procesing the payment. We received the payment but there was a problem crediting your account. Please email tech support at <a mailto:\"vanceza@gmail.com\">vanceza@gmail.com</a>");
      };
      uu = step.spawn();
      uc = step.spawn();
      updateUser = step.user.updateAttributes({
        credit: step.user.credit + step.credits
      }).success(uu).failure(onFailure);
      updateCharge = step.user_payment.updateAttributes({
        stripe_fee: fee,
        stripe_charge: id
      }).success(uc).failure(onFailure);
      return step.next();
    }, function(step, err) {
      return step.next();
    }
  ];
  errorHandler = function(error) {
    json.errorMsg = (error != null ? error.message : void 0) != null ? error.message : error.toString();
    common.logger.error(json.errorMsg);
    return routes.account(req, res, json);
  };
  return funcflow(steps, {
    errorHandler: errorHandler,
    user: user
  }, function(step, err) {
    json.successMsg = step.credits + " credits were successfully added to your account.";
    return routes.account(req, res, json);
  });
};
