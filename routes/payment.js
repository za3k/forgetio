// Generated by CoffeeScript 1.6.2
var check, common, ctrl, model, routes, sanitize, stripe;

check = require('validator').check;

common = require('../common');

model = require('../database/model');

ctrl = require('ctrl');

sanitize = require('validator').sanitize;

stripe = require('stripe')('sk_test_cnma6aLXwZVj28xddzaby1fL');

routes = require('./all');

exports.account = function(req, res, data) {
  var user;

  user = req.user.getUser();
  return model.getCommunication(user, function(err, result) {
    var all, result_present;

    if (err) {
      common.logger.error(err);
    }
    all = common._.pluck(result, 'server_received');
    result_present = common._.compact(all);
    return res.render('account.ect', common.extend({
      page: 'Account',
      req: req,
      user: {
        messagesReceived: result_present.length,
        messagesSent: all.length - result_present.length,
        timezone: user.timezone_id,
        name: user.name,
        credits: user.credit,
        email: user.email,
        lowerTimeEstimate: user.credit / 10,
        upperTimeEstimate: user.credit / 5
      },
      warningLevel: function(daysLeft) {
        if (daysLeft < 1) {
          return "alert alert-error";
        } else if ((1 <= daysLeft && daysLeft < 7)) {
          return "alert";
        } else {
          return "alert alert-info";
        }
      }
    }, data));
  });
};

exports.paymentPost = function(req, res) {
  var afterSuccessfulPayment, errorHandler, json, steps, user;

  json = req.body;
  user = req.user.getUser();
  steps = [
    function(step) {
      var stripe_token;

      common.logger.debug("Make sure form is validly formatted");
      stripe_token = json.stripeToken;
      if ((stripe_token == null) || stripe_token === "") {
        common.logger.error("Stripe token missing on payment form");
        throw "There was a server error with the form submission.";
      }
      check(json.credits).isInt().min(50).max(100000);
      step.data.credits = sanitize(json.credits).toInt();
      step.data.stripeToken = json.stripeToken;
      return step.next();
    }, function(step) {
      common.logger.debug("Calculate the correct price");
      step.data.cost = step.data.credits * 2;
      return step.next();
    }, function(step) {
      common.logger.debug("Record the token in the database before trying to run the charge");
      return model.createUserPayment({
        credit: step.data.credits,
        money: step.data.cost,
        stripe_token: step.data.stripeToken
      }, (function(userPayment, err) {
        step.data.createUserPaymentErr = err;
        step.data.userPayment = userPayment;
        return step.next();
      }));
    }, function(step) {
      if (step.data.createUserPaymentErr != null) {
        common.logger.error(step.data.createUserPaymentErr);
        throw "There was a server error with the form submission.";
      }
      return step.next();
    }, function(step) {
      var charge;

      common.logger.debug("Run the charge");
      charge = {
        amount: step.data.cost,
        currency: "usd",
        card: step.data.stripeToken,
        description: "Buying " + step.data.credits + " credits for account: " + user.id + " (email: " + user.email + ")"
      };
      return stripe.charges.create(charge, function(err, response) {
        step.data.stripeErr = err;
        step.data.response = response;
        return step.next();
      });
    }, function(step) {
      var err;

      err = step.data.stripeErr;
      if (err != null) {
        throw err;
      }
      return step.next();
    }, function(step) {
      common.logger.debug("Make sure the charge succeded");
      if (!step.data.response.paid || !step.data.response.paid === true) {
        common.logger.error("Payment declined");
        throw "Payment on this credit card was declined for the given amount.";
      }
      step.data.fee = step.data.response.fee;
      step.data.id = step.data.response.id;
      return step.next();
    }, function(step) {
      var chargeUpdated, userUpdated;

      common.logger.debug("Update the charge entry in the database");
      userUpdated = step.spawn();
      chargeUpdated = step.spawn();
      model.updateUser(user, {
        credit: user.credit + step.data.credits
      }, (function(updatedUser, err) {
        if (err != null) {
          step.data.updateUserErr = err;
        }
        return userUpdated();
      }));
      model.updateUserPayment(step.data.userPayment, {
        stripe_fee: step.data.fee,
        stripe_charge: step.data.id
      }, (function(updatedCharge, err) {
        if (err != null) {
          step.data.updateChargeErr = err;
        }
        return chargeUpdated();
      }));
      return step.next();
    }, function(step) {
      var paymentErrMsg;

      paymentErrMsg = "There was a problem procesing the payment. We received the payment but there was a problem crediting your account. Please email tech support at <a mailto:\"vanceza@gmail.com\">vanceza@gmail.com</a>";
      if (step.data.updateUserErr != null) {
        common.logger.error(step.data.updateUserErr);
        throw paymentErrMsg;
      }
      if (step.data.updateChargeErr != null) {
        common.logger.error(step.data.updateChargeErr);
        throw paymentErrMsg;
      }
      return step.next();
    }
  ];
  errorHandler = function(step, error) {
    common.logger.debug("errorHandler");
    json.errorMsg = (error != null ? error.message : void 0) != null ? error.message : error.toString();
    common.logger.error(json.errorMsg);
    return routes.account(req, res, json);
  };
  afterSuccessfulPayment = function(step) {
    json.successMsg = step.data.credits + " credits were successfully added to your account.";
    return routes.account(req, res, json);
  };
  return ctrl(steps, {
    errorHandler: errorHandler
  }, afterSuccessfulPayment);
};
