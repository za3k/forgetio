// Generated by CoffeeScript 1.6.2
var afterLogger, app, beforeLogger, common, compiler, ect, ectRenderer, errorHandler, express, http, logger, loginUtilMiddleware, model, nconf, path, routeCommonConfig, routes;

express = require('express');

routes = require('./routes/all');

http = require('http');

path = require('path');

ect = require('ect');

common = require('./common');

model = require('./database/model');

nconf = common.nconf;

logger = common.logger;

loginUtilMiddleware = function(req, res, next) {
  req.user = {
    login: function(user) {
      return req.session.UserId = user.id;
    },
    logout: function() {
      return req.session = null;
    },
    loggedIn: function() {
      var _ref;

      return ((_ref = req.session) != null ? _ref.UserId : void 0) != null;
    },
    userId: function() {
      var _ref;

      return (_ref = req.session) != null ? _ref.UserId : void 0;
    },
    fetch: function(next) {
      return model.getUserForId(req.user.userId(), function(user, error) {
        if (error != null) {
          logger.error("User not found in loginUtilMiddleware");
          next(error);
        }
        req.user._user = user;
        return next();
      });
    },
    getUser: function() {
      return req.user._user;
    }
  };
  return req.user.fetch(next);
};

routeCommonConfig = function(req, res, next) {
  req.config = common.ectConfig;
  return next();
};

compiler = require('connect-compiler')({
  enabled: ['snockets', 'less'],
  src: ['assets', 'assets/bootstrap/'],
  dest: 'public',
  options: {
    snockets: {
      minify: !nconf.get("debug")
    },
    less: {
      paths: ["./assets/bootstrap/css", "./assets/css"],
      compress: !nconf.get("debug")
    }
  }
});

beforeLogger = function(req, res, next) {
  return next();
};

afterLogger = function(req, res, next) {
  return next();
};

errorHandler = function(err, req, res, next) {
  if (err) {
    console.log(err.stack);
    logger.error(err.stack);
    return res.send(500, 'Something went quite wrong!');
  } else {
    return next(err);
  }
};

app = express();

ectRenderer = ect({
  watch: nconf.get("debug"),
  root: __dirname + '/views'
});

logger.debug('App Created!');

app.configure(function() {
  app.set('port', nconf.get("httpPort"));
  app.set('views', __dirname + '/views');
  app.engine('ect', ectRenderer.render);
  if (!nconf.get("debug")) {
    app.use(express.compress());
  }
  app.use(express.favicon());
  app.use(express.logger('dev'));
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.cookieParser('braSP8pUpR5XuDapHAT9e87ecHUtHufr'));
  app.use(express.cookieSession({
    cookie: {
      maxAge: 60 * 60 * 1000
    }
  }));
  app.use(routeCommonConfig);
  app.use(loginUtilMiddleware);
  app.use(beforeLogger);
  app.use(app.router);
  app.use(afterLogger);
  app.use(compiler);
  app.use(express["static"](path.join(__dirname, 'public')));
  return app.use(errorHandler);
});

logger.debug('App Configured!');

app.get('/', routes.home);

app.get('/index.html', routes.home);

app.get('/login.html', routes.login);

app.post('/login.html', routes.loginPost);

app.get('/signup.html', routes.signup);

app.post('/signup.html', routes.signupPost);

app.all('*.html', routes.ensureLogin);

app.get('/account.html', routes.account);

app.post('/account.html', routes.accountPost);

app.post('/payment.html', routes.paymentPost);

app.get('/scheduled.html', routes.scheduled);

app.post('/scheduled.html', routes.scheduledPost);

app.get('/results.html', routes.results);

app.get('/results/all', routes.csvExportAllReminders);

app.get('/results/:id', routes.csvExportSingleReminder);

app.get('/logout.html', routes.logout);

logger.debug('Routes Configured!');

http.createServer(app).listen(nconf.get("httpPort"), function() {
  return logger.debug("Server listening on port " + (nconf.get('httpPort')) + "!");
});
