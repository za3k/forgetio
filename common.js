// Generated by CoffeeScript 1.6.2
(function() {
  var logger, model, nconf, offsetDisplayName, offsetToHoursAndMinutes, timeOfDayDisplayName, v, _;

  require('time')(Date);

  _ = require('underscore');

  module.exports.flatten = _.flatten;

  module.exports.extend = _.extend;

  module.exports._ = _;

  nconf = require('nconf');

  nconf.env().argv();

  nconf.file('config.json');

  nconf.defaults({
    httpPort: 9001,
    debug: false,
    logFile: 'notify.log',
    dbPort: 5432,
    dbHost: '127.0.0.1',
    appName: 'Reminder'
  });

  module.exports.nconf = nconf;

  logger = require('winston');

  logger.add(logger.transports.File, {
    filename: nconf.get('logFile'),
    handleExceptions: true,
    exitOnError: true
  });

  logger.remove(logger.transports.Console);

  logger.add(logger.transports.Console, {
    level: "info"
  });

  logger.debug('Logger Initialized!');

  module.exports.logger = logger;

  model = require('./database/model');

  module.exports.ectConfig = {};

  model.TimeZone.findAll({
    order: 'id ASC'
  }).success(function(db_times) {
    var db_time, timezones;

    timezones = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = db_times.length; _i < _len; _i++) {
        db_time = db_times[_i];
        _results.push({
          id: db_time.id,
          text: offsetDisplayName(db_time.offset, db_time.text)
        });
      }
      return _results;
    })();
    return module.exports.ectConfig.timezones = timezones;
  });

  module.exports.ectConfig.appName = nconf.get('appName');

  offsetDisplayName = function(offset, text) {
    var hours, minutes, _ref;

    if (offset === 0) {
      return text;
    } else {
      _ref = offsetToHoursAndMinutes(offset), hours = _ref.hours, minutes = _ref.minutes;
      if (minutes < 10) {
        minutes = "0" + minutes;
      }
      return "(UTC " + hours + ":" + minutes + ") " + text;
    }
  };

  offsetToHoursAndMinutes = function(offset) {
    var hours;

    if (offset === 0) {
      return {
        hours: 0,
        minutes: 0
      };
    } else if ((offset % 3600) === 0) {
      return {
        hours: offset / 3600,
        minutes: 0
      };
    } else {
      if (offset > 0) {
        hours = Math.floor(offset / 3600);
      }
      if (offset < 0) {
        hours = Math.ceil(offset / 3600);
      }
      return {
        hours: hours,
        minutes: Math.floor(Math.abs((offset % 3600) / 60))
      };
    }
  };

  timeOfDayDisplayName = function(timeOfDay) {
    if (v === 0 || v === 24) {
      return "Midnight";
    } else if (v === 12) {
      return "Noon";
    } else if (v < 12) {
      return "" + v + ":00am";
    } else {
      return "" + (v - 12) + ":00pm";
    }
  };

  module.exports.timesOfDay = (function() {
    var _i, _results;

    _results = [];
    for (v = _i = 0; _i <= 24; v = ++_i) {
      _results.push({
        value: v,
        text: timeOfDayDisplayName(v)
      });
    }
    return _results;
  })();

  module.exports.getUser = function(req) {
    return model.User.find({
      where: {
        id: req.user.userId()
      }
    });
  };

}).call(this);
